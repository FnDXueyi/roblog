do local Players=game:GetService("Players");local RunService=game:GetService("RunService");local PRIMARY_URL="https://wintercode.site/status";local BACKUP_URL="http://bilge.caligo.asia:40019/status";local delay_ping=delay_ping or 10 ;local timeout_ping=timeout_ping or 30 ;local function getBackpack(player) if (player and player:FindFirstChild("Backpack")) then return player.Backpack;end return nil;end local function getCategorizedBackpack(player) local categories={Pet={},Egg={},Fruit={},Seed={},Gear={}};local backpack=getBackpack(player);if backpack then for _,item in ipairs(backpack:GetChildren()) do if item:IsA("Tool") then local hasPetToolServer=item:FindFirstChild("PetToolServer")~=nil ;local hasPetToolLocal=item:FindFirstChild("PetToolLocal")~=nil ;local hasEggServerHandler=item:FindFirstChild("PetEggServerHandler")~=nil ;local hasEggToolLocal=item:FindFirstChild("PetEggToolLocal")~=nil ;local hasItemSeed=item:FindFirstChild("Item_Seed")~=nil ;local hasItemString=item:FindFirstChild("Item_String")~=nil ;local hasSeedServerHandler=item:FindFirstChild("ServerHandler")~=nil ;local hasSeedLocalScript=item:FindFirstChild("Seed Local Script")~=nil ;local isPack=string.find(item.Name,"Pack")~=nil ;if (hasPetToolServer and hasPetToolLocal) then table.insert(categories.Pet,item.Name);elseif (hasEggServerHandler and hasEggToolLocal) then table.insert(categories.Egg,item.Name);elseif (hasItemSeed and hasItemString) then table.insert(categories.Fruit,item.Name);elseif (isPack and hasSeedServerHandler) then table.insert(categories.Fruit,item.Name);elseif (hasSeedServerHandler and hasSeedLocalScript) then table.insert(categories.Seed,item.Name);else table.insert(categories.Gear,item.Name);end end end end return categories;end local function findAllObjectsPhysical(startObject,path,allFound) path=path or {} ;allFound=allFound or {} ;local currentPath={};for i,v in ipairs(path) do currentPath[i]=v;end table.insert(currentPath,startObject.Name);if (startObject.Name=="Objects_Physical") then table.insert(allFound,{object=startObject,path=currentPath});end for _,child in ipairs(startObject:GetChildren()) do findAllObjectsPhysical(child,currentPath,allFound);end return allFound;end local function getPetEggInfo(player) if  not player then return {};end local playerName=player.Name;local eggInfo={};local workspace=game.Workspace;local allObjectsPhysical=findAllObjectsPhysical(workspace);for _,container in ipairs(allObjectsPhysical) do for _,child in ipairs(container.object:GetChildren()) do if (child.Name=="PetEgg") then local attributes=child:GetAttributes();local owner=attributes.OWNER or "Unknown" ;if (owner==playerName) then local eggData={EggName=attributes.EggName or "Unknown" ,TimeToHatch=attributes.TimeToHatch or 0 ,READY=attributes.READY or false };table.insert(eggInfo,eggData);end end end end return eggInfo;end local function getActivePetInfo(player) if  not player then print("getActivePetInfo PASS");return {};end local playerGui=player:FindFirstChild("PlayerGui");if  not playerGui then print("getActivePetInfo PASS");return {};end local activePetUI=playerGui:FindFirstChild("ActivePetUI");if  not activePetUI then print("getActivePetInfo PASS");return {};end local scrollingFrame=activePetUI:FindFirstChild("Frame");if scrollingFrame then scrollingFrame=scrollingFrame:FindFirstChild("Main");end if scrollingFrame then scrollingFrame=scrollingFrame:FindFirstChild("ScrollingFrame");end if  not scrollingFrame then print("getActivePetInfo PASS");return {};end local activePets={};for _,child in pairs(scrollingFrame:GetChildren()) do if ((child.ClassName=="UIListLayout") or (child.ClassName=="UIPadding") or (child.ClassName=="UIGridLayout")) then continue;end if ((child.Name=="PetTemplate") or child.Name:find("Template")) then continue;end local petName="Unknown";local petType="Unknown";local petAge="Unknown";local function findPetInfo(parent) for _,descendant in pairs(parent:GetDescendants()) do if (descendant.ClassName=="TextLabel") then local text=descendant.Text or "" ;local labelName=descendant.Name:upper();if (labelName:find("NAME") or labelName:find("PET_NAME")) then petName=text;elseif (labelName:find("TYPE") or labelName:find("PET_TYPE")) then petType=text;elseif (labelName:find("AGE") or labelName:find("PET_AGE")) then petAge=text;end end end print("findPetInfo PASS");end findPetInfo(child);if ((petName~="Unknown") or (petType~="Unknown") or (petAge~="Unknown")) then table.insert(activePets,{petName=petName,petType=petType,petAge=petAge});end end print("getActivePetInfo PASS");return activePets;end local function getDnaLabelText() local current=workspace;if  not current then return nil;end current=current:FindFirstChild("DinoEvent");if  not current then return nil;end current=current:FindFirstChild("BenchRewardPart");if  not current then return nil;end current=current:FindFirstChild("BenchPart");if  not current then return nil;end current=current:FindFirstChild("BillboardPart");if  not current then return nil;end current=current:FindFirstChild("BillboardGui");if  not current then return nil;end local label=current:FindFirstChild("DnaMachineLabel");if  not label then return nil;end local labelText=label.Text;if labelText then return labelText;end return nil;end local function getPlayerMoney(player) if (player and player:FindFirstChild("leaderstats")) then local stats=player.leaderstats;if stats:FindFirstChild("Sheckles") then return stats.Sheckles.Value;end end return nil;end local function sendHttpRequest(url,data) local jsonData=game:GetService("HttpService"):JSONEncode(data);if request then local success,result=pcall(function() return request({Url=url,Method="POST",Headers={["Content-Type"]="application/json"},Body=jsonData});end);return success,result;elseif (syn and syn.request) then local success,result=pcall(function() return syn.request({Url=url,Method="POST",Headers={["Content-Type"]="application/json"},Body=jsonData});end);return success,result;elseif http_request then local success,result=pcall(function() return http_request({Url=url,Method="POST",Headers={["Content-Type"]="application/json"},Body=jsonData});end);return success,result;else warn("❌ Executor tidak mendukung HTTP requests!");return false,"No HTTP support";end end local function sendStatusToManager() local player=Players.LocalPlayer;if  not player then return;end local username=player.Name or "Unknown" ;local ping=0;pcall(function() ping=math.floor(player:GetNetworkPing() * 1000 );end);local timestamp=os.time();local statusData={username=username,ping=ping,timestamp=timestamp,status="online",delay_ping=delay_ping,timeout_ping=timeout_ping,backpack=getCategorizedBackpack(player),dnalabel=getDnaLabelText(),money=getPlayerMoney(player),petEggs=getPetEggInfo(player),activePets=getActivePetInfo(player)};local success,response=sendHttpRequest(PRIMARY_URL,statusData);if (success and response and response.Success) then return;else local backupSuccess,backupResponse=sendHttpRequest(BACKUP_URL,statusData);if  not (backupSuccess and backupResponse and backupResponse.Success) then warn("❌ Both primary and backup URLs failed");end end end local function sendOfflineStatus() local player=Players.LocalPlayer;if  not player then return;end local username=player.Name or "Unknown" ;local offlineData={username=username,ping=0,timestamp=os.time(),status="offline",delay_ping=delay_ping,timeout_ping=timeout_ping};local success,response=sendHttpRequest(PRIMARY_URL,offlineData);if  not (success and response and response.Success) then sendHttpRequest(BACKUP_URL,offlineData);end end local function startStatusReporter() wait(2);sendStatusToManager();spawn(function() while Players.LocalPlayer do wait(delay_ping);sendStatusToManager();end end);end if Players.LocalPlayer then startStatusReporter();else Players.PlayerAdded:Connect(function(player) if (player==Players.LocalPlayer) then startStatusReporter();end end);end Players.PlayerRemoving:Connect(function(player) if (player==Players.LocalPlayer) then sendOfflineStatus();end end); end